def f(x,y):
    return x**2 + y**2


def diff_eq_Euler(x0, y0, x1, h): #IMPORTANT: if you want the result for x1=1.4, you should pass as argument x1= 1.399999 because of precision, h'' can change
    x = x0
    y = y0
    while x < x1:
        y = y + h*f(x,y)
        x = x + h
    return x,y

def diff_eq_Euler_is_h_ok(x0, y0, x1,h):
    QC = (diff_eq_Euler(x0, y0, x1, h/2)[1]- diff_eq_Euler(x0, y0, x1, h)[1])/ (diff_eq_Euler(x0, y0, x1, h/4)[1]- diff_eq_Euler(x0, y0, x1, h/2)[1])
    return QC # should be a comment if you want it to return true or false
    QC = round(QC)
    if QC ==2.0:
        return True
    else:
        return False


def diff_eq_Euler_error(x0, y0, x1,h):
    return diff_eq_Euler(x0, y0, x1, h/4)[1]- diff_eq_Euler(x0, y0, x1, h/2)[1]

def diff_eq_RungeKutta2(x0, y0, x1, h):
    x = x0
    y = y0
    while x < x1:
        y = y + h*f(x+h/2,y+(h/2)*f(x,y))
        x = x + h
    return x,y

def diff_eq_RungeKutta2_is_h_ok(x0, y0, x1,h):
    QC = (diff_eq_RungeKutta2(x0, y0, x1, h/2)[1]- diff_eq_RungeKutta2(x0, y0, x1, h)[1])/ (diff_eq_RungeKutta2(x0, y0, x1, h/4)[1]- diff_eq_RungeKutta2(x0, y0, x1, h/2)[1])
    return QC # should be a comment if you want it to return true or false
    QC = round(QC)
    if QC ==4.0:
        return True
    else:
        return False

def diff_eq_RungeKutta2_error(x0, y0, x1,h):
    return (diff_eq_RungeKutta2(x0, y0, x1, h/4)[1]- diff_eq_RungeKutta2(x0, y0, x1, h/2)[1])/3

def diff_eq_RungeKutta4(x0, y0, x1, h):
    x = x0
    y = y0
    while x < x1:
        dy1= h*f(x,y)
        dy2 = h*f(x+h/2, y+dy1/2)
        dy3 = h*f(x+h/2, y+dy2/2)
        dy4 = h*f(x+h/2, y+dy3)
        y = y + 1/6*dy1 +1/3*dy2 + 1/3*dy3 + 1/6*dy4
        x = x + h
    return x,y

def diff_eq_RungeKutta4_is_h_ok(x0, y0, x1,h):
    QC = (diff_eq_RungeKutta4(x0, y0, x1, h/2)[1]- diff_eq_RungeKutta4(x0, y0, x1, h)[1])/ (diff_eq_RungeKutta4(x0, y0, x1, h/4)[1]- diff_eq_RungeKutta4(x0, y0, x1, h/2)[1])
    return QC # should be a comment if you want it to return true or false
    QC = round(QC)
    if QC ==4.0:
        return True
    else:
        return False

def diff_eq_RungeKutta4_error(x0, y0, x1,h):
    return (diff_eq_RungeKutta4(x0, y0, x1, h/4)[1]- diff_eq_RungeKutta4(x0, y0, x1, h/2)[1])/15
#print("Euler's method - diff equations: x= %s, y= %s " % diff_eq_Euler(0, 0, 1.4, 0.1))
#print("Euler's method - diff equations: x= %s, y= %s " % diff_eq_Euler(0, 0, 1.4, 0.05))
print("Euler's method: x= %s, y= %s " % diff_eq_Euler(0, 0, 1.39999, 0.1))
print("Euler's method QC: x= %s" % diff_eq_Euler_is_h_ok(0, 0, 1.3999999, 0.1))
print("Euler's method Error: x= %s" % diff_eq_Euler_error(0, 0, 1.3999999, 0.1))
print("Runge-Kutta2 - diff equations: x= %s, y= %s " % diff_eq_RungeKutta2(0, 0, 1.39999, 0.1))
print("Runge-Kutta2's method QC: x= %s" % diff_eq_RungeKutta2_is_h_ok(0, 0, 1.39999, 0.1))
print("Runge-Kutta2's method Error: x= %s" % diff_eq_RungeKutta2_error(0, 0, 1.399999, 0.1))
print("Runge-Kutta4 - diff equations: x= %s, y= %s " % diff_eq_RungeKutta4(0, 0, 1.39999, 0.1))
print("Runge-Kutta4's method QC: x= %s" % diff_eq_RungeKutta4_is_h_ok(0, 0, 1.399999, 0.1))
print("Runge-Kutta4's method Error: x= %s" % diff_eq_RungeKutta4_error(0, 0, 1.39999, 0.1))
