import math
import numpy as np

def f(x, y):
    return math.sqrt((x*y+5*x-1)/2)

def g(x, y):
    return math.sqrt(x+3*np.log(x))

def f1(x, y):
    return 2*x**2- x*y -5*x +1

def g1(x, y):
    return x+3* np.log(x)-y**2


def df_x (x, y):
    return 4*x -y-5


def df_y (x, y):
    return -x

def dg_x (x, y):
    return 1 + 3/x


def dg_y (x, y):
    return -2*y


def PicardPeano (x, y, n):
    for i in range (0, n):
        x = f(x, y)
        y = g(x, y)
    return x, y


def PicardPeano_error (x, y, n):
    while abs(f(x,y)-x)> n and abs(g(x,y)-y)>n:
        x = f(x, y)
        y = g(x, y)
    return x, y

def Newton(x,y,n):
    for i in range (0, n):
        x= x- (f1(x,y)*dg_y(x,y)-g1(x,y)*df_y(x,y))/(df_x(x,y)*dg_y(x,y)-dg_x(x,y)*df_y(x,y))
        y = y- (g1(x,y)*df_x(x,y)-f1(x,y)*dg_x(x,y))/(df_x(x,y)*dg_y(x,y)-dg_x(x,y)*df_y(x,y))
    return x,y



print("PP-N iterations : X= %s, Y= %s " % PicardPeano(4,4, 10))
print("PP- E criteria: X= %s, Y= %s " % PicardPeano_error(4,4, 10**-20))
print("Newton: X= %s, Y= %s " % Newton(4,4, 10))
